name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches:
      - '*'

jobs:
  build-wrapper:

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, windows-latest]
    
    steps:
      - uses: actions/checkout@v2

      - name: Setup Python 3.x
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
          architecture: 'x64'

      - name: Compile wrapper on Windows
        if: startsWith(runner.os, 'Windows')
        run: |
          pip install conan
          cd $Env:github_workspace/src/FMU4FOAM/FMU4FOAM-export
          mkdir tmp-build
          conan install . -s build_type=Release --install-folder=tmp-build --build=missing
          cd tmp-build
          cmake .. -DCMAKE_BUILD_TYPE=Release -A x64
          cmake --build . --config Release
          cd ..

      - name: Compile wrapper on Linux / macOS
        if: startsWith(runner.os, 'Linux') || startsWith(runner.os, 'macOS')
        run: |
          pip install conan
          cd $GITHUB_WORKSPACE/src/FMU4FOAM/FMU4FOAM-export
          mkdir tmp-build
          conan install . -s build_type=Release -s compiler.libcxx=libstdc++ --install-folder=tmp-build
          cd tmp-build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          cmake --build . --config Release
          cd ..

      - name: Archive wrapper library
        uses: actions/upload-artifact@v2
        with:
          name: lib-wrapper
          path: src/FMU4FOAM/resources

  build-python:
    needs: build-wrapper
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup Python 3.x
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
          architecture: 'x64'

      - name: Download wrappers
        uses: actions/download-artifact@v1
        with:
          name: lib-wrapper
          path: src/FMU4FOAM/resources
    
      - name: Build distribution artifacts
        run: |
          python -m pip install setuptools wheel
          python setup.py sdist bdist_wheel

      - name: Archive production artifacts
        uses: actions/upload-artifact@v1
        with:
          name: python-wheel
          path: dist

  test:
    needs: build-python
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-2019]
        python-version: ["3.7", "3.8", "3.9", "3.10"]
        # exclude:
        #   - os: ubuntu-20.04
        #     python-version: 3.7
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v2

      - name: Download python package
        uses: actions/download-artifact@v1
        with:
          name: python-wheel

      - name: Setup Python ${{ matrix.python-version }}
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}
        
      - name: Setup Enviroment
        run: |
          conda activate test
          # Install test dependencies - update environment.yml if they changed
          conda env update --name=test --file=environment.yml
          # python -m pip install pyzmq pythonfmu
          # install wheel
          cd python-wheel
          python -m pip install FMU4FOAM*.whl
          
        shell: bash -l {0}
        
      - name: run tests
        run: |
          conda activate test
          cd test
          fmu4foam build -f test-example.py -of damBreak/ --no-external-tool
          python test-omsim.py > omsim &
          python test-zmqclient.py > zmq
          
        shell: bash -l {0}
       
      - name: upload Fmus
        uses: actions/upload-artifact@v2
        with:
          name: fmus
          path: test/Example.fmu


  build-and-test:
    needs: build-python
    runs-on: ubuntu-latest
    timeout-minutes: 20
    


    steps:
    - uses: actions/checkout@v2
      with:
          submodules: recursive
    - name: Setup Python 39
      uses: conda-incubator/setup-miniconda@v2
      with:
          auto-update-conda: true
          python-version: 3.9
          
    - name: setup  openfoam
      run: |
        curl -s https://dl.openfoam.com/add-debian-repo.sh | sudo bash
        wget -q -O - https://dl.openfoam.com/add-debian-repo.sh | sudo bash
        sudo apt-get install openfoam2106-default
    - name: compile
      shell: bash -l {0}
      run: |
        # setup
        conda activate test
        export WM_NCOMPPROCS=2
        python -m pip install --upgrade pip
        pip install oftest conan
        openfoam2106 -c ./build-ECI4FOAM.sh

        # compile OpenFOAM
        openfoam2106 -c ./Allwmake

    - name: Download python package
      uses: actions/download-artifact@v1
      with:
        name: python-wheel

    - name: test
      shell: bash -l {0}
      run: |
        conda activate test
        # Install test dependencies - update environment.yml if they changed
        conda env update --name=test --file=environment.yml
        pip install -r requirements.txt
        cd python-wheel
        pip install FMU4FOAM*.whl
        cd ..
        openfoam2106 -c "py.test -v --tb=auto"

    - name: upload logs
      if: ${{ failure() }}
      uses: actions/upload-artifact@v2
      with:
        name: logs
        path: logs

  build-and-test-wsl:
    needs: build-python
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: setup  wsl
      uses: Vampire/setup-wsl@v1.2.0
      with:
          distribution: Ubuntu-20.04
          
    - name: setup  openfoam
      shell: wsl-bash_Ubuntu-20.04 {0}
      run: |
        echo $PWD
        sudo apt-get update
        sudo apt-get install -y dos2unix ca-certificates cmake
        sudo find . -type f -exec dos2unix {} \;
        curl -s https://dl.openfoam.com/add-debian-repo.sh | sudo bash
        wget -q -O - https://dl.openfoam.com/add-debian-repo.sh | sudo bash
        sudo apt-get install -y openfoam2106-default
        sudo apt-get install -y libatlas-base-dev
        wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh
        bash ~/miniconda.sh -b -p $HOME/miniconda
        export PATH="$HOME/miniconda/bin:$PATH"
        
        
    - name: compile
      shell: wsl-bash_Ubuntu-20.04 {0}
      run: |
        # setup
        find . -name Allwmake -exec echo chmod u+x {} \; 
        find . -name Allrun -exec echo chmod u+x {} \; 
        find . -name *.sh -exec echo chmod u+x {} \; 
        export PATH="$HOME/miniconda/bin:$PATH"
        export WM_NCOMPPROCS=2

        python -m pip install --upgrade pip
        pip install oftest conan 
        openfoam2106 -c ./build-ECI4FOAM.sh

        # compile OpenFOAM
        openfoam2106 -c ./Allwmake

    - name: Download python package
      uses: actions/download-artifact@v1
      with:
        name: python-wheel

    - name: test
      shell: wsl-bash_Ubuntu-20.04 {0}
      run: |
        export PATH="$HOME/miniconda/bin:$PATH"
        conda install -c conda-forge pyfmi
        pip install -r requirements.txt
        cd python-wheel
        pip install FMU4FOAM*.whl
        cd ..
        openfoam2106 -c "py.test -v --tb=auto"

    - name: upload logs
      if: ${{ failure() }}
      uses: actions/upload-artifact@v2
      with:
        name: logs-windows
        path: logs
