name: Upload Python Package

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]

jobs:
  build-wrapper:

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, windows-latest]
    
    steps:
      - uses: actions/checkout@v2

      - name: Setup Python 3.x
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
          architecture: 'x64'

      - name: Compile wrapper on Windows
        if: startsWith(runner.os, 'Windows')
        run: |
          pip install conan
          cd $Env:github_workspace/src/FMU4FOAM/FMU4FOAM-export
          mkdir tmp-build
          conan install . -s build_type=Release --install-folder=tmp-build
          cd tmp-build
          cmake .. -DCMAKE_BUILD_TYPE=Release -A x64
          cmake --build . --config Release
          cd ..
      - name: Compile wrapper on Linux / macOS
        if: startsWith(runner.os, 'Linux') || startsWith(runner.os, 'macOS')
        run: |
          pip install conan
          cd $GITHUB_WORKSPACE/src/FMU4FOAM/FMU4FOAM-export
          mkdir tmp-build
          conan install . -s build_type=Release -s compiler.libcxx=libstdc++ --install-folder=tmp-build
          cd tmp-build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          cmake --build . --config Release
          cd ..
      - name: Archive wrapper library
        uses: actions/upload-artifact@v2
        with:
          name: lib-wrapper
          path: src/FMU4FOAM/resources

  deploy:
    needs: build-wrapper
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup Python 3.x
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
          architecture: 'x64'

      - name: Download wrappers
        uses: actions/download-artifact@v1
        with:
          name: lib-wrapper
          path: src/FMU4FOAM/resources
    
      - name: Build distribution artifacts
        run: |
          python -m pip install --upgrade pip
          python -m pip install setuptools wheel twine
          python setup.py sdist bdist_wheel
      - name: Build and publish
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_FMU4FOAM_API_TOKEN }}
        run: |
          ls dist
          twine upload dist/*

